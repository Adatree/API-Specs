openapi: 3.0.1
info:
  title: Consent Dashboard API Overview
  description: Consent Dashboard REST API for ADRs. This allows consumers to directly create records of consent granted to access their consumer data.
  contact:
    name: Adatree Pty Ltd
    url: 'https://adatree.com.au'
    email: engineering@adatree.com.au
  version: '1.0.0'
tags:
  - name: Consent
servers:
  - url: 'https://cdr-insights-prod.api.adatree.com.au'
    description: Server url
paths:
  '/consent-mgmt/consents/{consentId}':
    get:
      security:
        - bearerAuth: [ 'consumer:consents:read' ]
      tags:
        - Consent
      summary: Get Consent
      description: Retreive a single consent record for this consumer
      operationId: findConsent
      parameters:
        - name: consentId
          in: path
          required: true
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          schema:
            type: string
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
    patch:
      security:
        - bearerAuth: [ 'consumer:consents:write' ]
      tags:
        - Consent
      summary: Update Consent
      description: Update a single consent record for this consumer
      operationId: updateConsent
      parameters:
        - name: consentId
          in: path
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConsent'
      responses:
        200:
          description: consent successfully updated
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
    delete:
      security:
        - bearerAuth: [ 'consumer:consents:write' ]
      tags:
        - Consent
      summary: Revoke Consent
      description: Revoke a single consent record for this consumer
      operationId: revokeConsent
      parameters:
        - name: consentId
          in: path
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          required: true
          schema:
            type: string
      responses:
        200:
          description: default response
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
  '/consent-mgmt/consents':
    get:
      security:
        - bearerAuth: [ 'consumer:consents:read' ]
      tags:
        - Consent
      summary: Get Consents
      description: Get all consent records for this consumer
      operationId: findAllConsents
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsentResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        429:
          $ref: '#/components/responses/429RateLimited'
    post:
      security:
        - bearerAuth: [ 'consumer:consents:write' ]
      tags:
        - Consent
      summary: Create Consent
      description: Create a consent record for consumer
      operationId: createConsent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsent'
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        422:
          description: active consent exists for requested use case
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        429:
          $ref: '#/components/responses/429RateLimited'
  '/consent-mgmt/use-cases':
    get:
      security:
        - bearerAuth: [ 'consumer:use-cases:read' ]
      tags:
        - UseCase
      summary: Get Use-cases
      description: Get all use-cases that have been configured. A use case is your reason for requesting consent from a consumer e.g. a home loan assessment, a budgeting app.
      operationId: findAllUseCases
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UseCaseResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        429:
          $ref: '#/components/responses/429RateLimited'
  '/infosec/authorization':
    get:
      security:
        - bearerAuth: [ 'consumer:authorizations:write' ]
      tags:
        - Authorization
      summary: Get Authorization Redirect URL
      description: Get the authorization redirect URL to send the consumer to the data holder
      operationId: getAuthorization
      parameters:
        - name: nonce
          description: (deprecated) A nonce is generated by the consent user-agent (browser) and is sent in the authentication request, and is then also included in the ID Token response from the Data Holder. This allows us to correlate the ID Token response with the initial authentication request.
          in: query
          required: false
          deprecated: true
          schema:
            type: string
        - name: state
          description: A state is generated by the consent user-agent (browser) and is used to bind the redirection response from a Data Holder with a user session as per https://openid.net/specs/openid-financial-api-part-1-1_0-final.html#public-client. It is sent in the authentication request, and is then also included redirect from the ADH to the ADR. This allows the ADR client application prevent CSRF attacks. Must be unique per authorization request.
          in: query
          required: false
          schema:
            type: string
        - name: dataHolderBrandId
          description: The ideintifier of the data holder you wish the consumer to authenitcate with.
          in: query
          required: true
          schema:
            type: string
        - name: cdrConsentId
          description: (deprecated - use consentId) The identifier of the consent record to be associated with this authentication request.
          in: query
          required: false
          deprecated: true
          schema:
            type: string
        - name: consentId
          description: The identifier of the consent record to be associated with this authentication request.
          in: query
          required: false
          schema:
            type: string
        - name: cdrArrangementId
          description: The identifier of an existing CDR Arrangement that you wish to extend.
          in: query
          required: false
          schema:
            type: string
        - name: softwareProductId
          description: The identifier of the software product registered at the ACCC registry to be associated with this authentication request. If omitted the configured default software product ID is used.
          in: query
          required: false
          schema:
            type: string
        - name: specificRedirectUri
          description: (deprecated - use redirectUri) The URI to redirect to from the data holder when the consumer has finished data holder authentication. Must be from the list of redirect URIs configured at the ACCC register.
          in: query
          required: false
          deprecated: true
          schema:
            type: string
        - name: redirectUri
          description: The URI to redirect to from the data holder when the consumer has finished data holder authentication. Must be from the list of redirect URIs configured at the ACCC register.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: default response
          content:
            application/json:
              schema:
                type: string
  '/infosec/tokens':
    post:
      summary: Create Tokens
      description: Send the required parameters from the data holder to the ADR Platform backend to finish extablishing data access
      security:
        - bearerAuth: [ 'consumer:tokens:write' ]
      tags:
        - Tokens
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authorization'
      responses:
        '200':
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenCreatedResponse'
  '/dcr/software-products/{softwareProductId}/data-holders':
    get:
      summary: Get Data Holders
      description: Get the list of available data holders for a software product
      security:
        - bearerAuth: [ 'consumer:data-holders:read' ]
      tags:
        - Data Holders
      operationId: getDataHolders
      parameters:
        - name: softwareProductId
          description: The identifier of the software product registered at the ACCC registry. The list of data holders returned is the list where dynamic client reigstration has been peformed at each data holder for this software product.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataHolder'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UpdateConsent:
      type: object
      properties:
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        directMarketingAllowed:
          type: boolean
          example: true
        sharingEndDate:
          type: string
          description: new sharing end date, will be rounded to the end of specified date and validated against sharing duration options defined in chosen Use Case
          format: date
          x-cds-type: DateString
          example: "1997-01-12"
    CreateConsent:
      type: object
      properties:
        consumerEmail:
          type: string
          example: "consumer@example.com"
        sharingEndDate:
          type: string
          description: sharing end date, will be rounded to the end of specified date and validated against sharing duration options defined in chosen Use Case
          format: date
          example: "1997-01-12"
          x-cds-type: DateString
        dataHolderBrandId:
          type: string
          example: 55b3299a-3e50-48a2-a190-cca263ccaba5
        useCaseId:
          type: string
          example: HOME_LOAN
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        directMarketingAllowed:
          type: boolean
          example: false
        consumerMobileNumber:
          type: string
          example: "00614000555666"
        externalId:
          type: string
          description: Adatree's customer can supply an externalId when creating consents to associate with records in its own system
          example: external-id-by-adatree-customer
    ConsentResponse:
      type: object
      properties:
        version:
          type: integer
          format: int32
          example: 1.0
        created:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "1997-01-12T15:43:00.121Z"
        revoked:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "1997-01-12T15:43:00.121Z"
        lastNotificationSentAt:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "1997-01-12T15:43:00.121Z"
        firstDataCollection:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "2012-01-12T15:43:00.121Z"
        status:
          $ref: '#/components/schemas/Status'
        sharingEndDate:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "1997-01-12T15:43:00.121Z"
        consumerEmail:
          type: string
          example: "consumer@example.com"
        dataHolderName:
          type: string
          example: ANZ
        dataHolderBrandId:
          type: string
          example: f632041c-d7c8-4679-a165-aa406cd62b13
        useCase:
          $ref: '#/components/schemas/UseCaseResponse'
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        consumerId:
          type: string
          example: abedfaas-asdfsf-4asdf-1465-sfsadf3413
        cdrArrangementId:
          type: string
          example: 86a5d068-447a-4765-95c2-6f5d85d9d658
        consentId:
          type: string
          example: 7c7853a6-5466-11eb-ae93-0242ac130002
        directMarketingAllowed:
          type: boolean
          example: false
        consumerMobileNumber:
          type: string
          example: "00614000555666"
        externalId:
          type: string
          description: Adatree's customer can supply an externalId when creating consents to associate with records in its own system
          example: external-id-by-adatree-customer
    UseCaseResponse:
      type: object
      properties:
        id:
          type: string
          example: HOME_LOAN
        name:
          type: string
          example: Home Loan Assessment
        description:
          type: string
          example: Data will be used to assess your eligibility for a home loan.
        priority:
          type: integer
          format: int32
          example: 1
        historicalCollectionPeriodInDays:
          type: integer
          format: int32
          example: 90
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeResponse'
        accessFrequency:
          $ref: '#/components/schemas/AccessFrequency'
        sharingDurations:
          type: array
          description: default to ["CUSTOM"] for Ongoing consent; default to ["ONCE_OFF"] for Once_off consent if not supplied
          items:
            $ref: '#/components/schemas/SharingDuration'
    ScopeResponse:
      type: object
      properties:
        name:
          type: string
          example: Bank account name, type and balance
        id:
          type: string
          example: bank:accounts.basic:read
        purpose:
          type: string
          example: "This will allow us to provide best of kind service"
        description:
          type: string
          example: This will allow us to access basic information about your accounts
        claims:
          type: array
          example: [ "Name of account", "Type of account", "Account balance"]
          items:
            type: string
        priority:
          type: integer
          example: 1
          format: int32
    ResponseErrorList:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ResponseErrorListErrors'
    ResponseErrorListErrors:
      required:
        - code
        - detail
        - title
      properties:
        code:
          type: string
          description: 'Error code'
          example: "0001"
        title:
          type: string
          description: 'Title of invalid parameter or payload property'
          example: "status"
        detail:
          type: string
          description: 'detailed error message'
          example: "invalid status"
        meta:
          type: object
          description: Optional additional data for specific error types
          properties: {}
    # enum
    AccessFrequency:
      type: string
      example: ONCE_OFF
      enum:
        - ONCE_OFF
        - ONGOING
    NotificationType:
      type: string
      example: EMAIL
      enum:
        - EMAIL
        - SMS
    PostUsageAction:
      type: string
      example: DELETION
      enum:
        - DELETION
        - DE_IDENTIFICATION
    Status:
      type: string
      example: ACTIVE
      enum:
        - REQUESTED
        - ACTIVE
        - EXPIRED
        - REVOKED
    SharingDuration:
      type: string
      description: |
        sharingDuration for Once_off consent can only be "ONCE_OFF" <br/>
        sharingDuration for Ongoing consent could be one of predefined sharing durations or "CUSTOM" <br/>
        "CUSTOM" (Ongoing consent) means a consumer is free to choose a sharingEndDate
      example: ONE_YEAR
      enum:
        - ONE_DAY
        - ONE_WEEK
        - TWO_WEEKS
        - ONE_MONTH
        - THREE_MONTHS
        - SIX_MONTHS
        - NINE_MONTHS
        - ONE_YEAR
        - CUSTOM
        - ONCE_OFF
    Authorization:
      type: object
      properties:
        code:
          type: string
          description: Authorization code returned from the data holder that will be used as part of token request validation.
        state:
          type: string
          description: The state is a parameter returned by the data holder that is used to prevent CSRF attacks. Must be unique per authorization request.
        id_token:
          type: string
          description: ID Token value associated with the authenticated session that is returned from the data holder.
    TokenCreatedResponse:
      type: object
      properties:
        activeConsentId:
          type: string
          description: Identifier of the consent which has now been activated by the completion of the Authorization flow.
    DataHolder:
      required:
        - brandName
        - dataHolderBrandId
        - logoUri
      type: object
      properties:
        dataHolderBrandId:
          type: string
          description: The ideintifier of the data holder you wish the consumer to authenitcate with.
          example: 7ff47a14-28bd-4b04-b216-67b367713a38
        brandName:
          type: string
          description: The brand name of the data holder you wish the consumer to authenitcate with.
          example: Westpac
        logoUri:
          type: string
          description: The logo URI of the data holder you wish the consumer to authenitcate with.
          example: https://www.westpac.com.au/logo
        sector:
          type: string
          example: banking
        scopesSupported:
          type: array
          example: ["bank:accounts.basic:read", "bank:accounts.detail:read", "bank:transactions:read", "bank:payees:read", "bank:regular_payments:read", "common:customer.basic:read", "common:customer.detail:read"]
          description: a list of Authorisation Scopes supported by data holder
          items:
            type: string
  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    401Unauthorised:
      description: Unauthorised
    403Forbidden:
      description: Forbidden
    404NotFound:
      description: The specified resource was not found.
    400BadRequest:
      description: Request is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseErrorList'
    422UnprocessableEntity:
      description: Unprocessable entity
    429RateLimited:
      description: Ratelimit reached
    GenericError:
      description: An error occurred.
      content:
        application/json:
          schema:
            type: string
            example: something went wrong
