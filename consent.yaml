openapi: 3.0.1
info:
  title: Adatree ADR Platform Machine Client API
  description: A machine-to-machine consent REST API for ADRs. <p>This allows ADR customers to query for consents granted by their customers to access CDR consumer data </p> <p>It also provides a mechanism to configure scopes and use-cases which are then made available in the consent dashboard.</p>
  contact:
    name: Adatree Pty Ltd
    url: 'https://adatree.com.au'
    email: engineering@adatree.com.au
  version: '1.4.0'
servers:
  - url: https://adatree-nonprod.adatree.com.au
paths:
  /consents/v2:
    get:
      security:
        - bearerAuth:
            - 'consents:read'
        - m2m:
            - 'consents:read'
      tags:
        - Consent
      summary: Get Consents
      description: Get all consent records for this consumer
      operationId: findAllConsentsV2
      parameters:
        - name: consumerId
          in: query
          description: 'Please ensure proper encoding of this parameter as identifier values from some IDPs could have special characters like ''|'', which need be encoded as ''%7c''. <br/> consumerId should only be used with machine token, otherwise it will be deemed BAD_REQUEST'
          example: auth0%7c5fbc585628421a006e83d95d
          required: false
          schema:
            type: string
        - name: consumerEmail
          in: query
          example: hello@adatree.com.au
          required: false
          schema:
            type: string
        - name: consentId
          in: query
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          required: false
          schema:
            type: string
        - name: cdrArrangementId
          in: query
          example: 45db4977-b12f-42bf-808d-2680eb4bd366
          required: false
          schema:
            type: string
        - name: status
          in: query
          required: false
          example: ACTIVE
          schema:
            type: string
            enum:
              - REQUESTED
              - ACTIVE
              - REVOKED
              - EXPIRED
        - name: accessFrequency
          in: query
          required: false
          example: ONCE_OFF
          schema:
            type: string
            enum:
              - ONCE_OFF
              - ONGOING
        - name: postUsageAction
          in: query
          required: false
          example: DELETION
          schema:
            type: string
            enum:
              - DELETION
              - DE_IDENTIFICATION
        - name: directMarketingAllowed
          in: query
          required: false
          example: false
          schema:
            type: boolean
        - name: useCaseIds
          description: UseCase ids
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: dataHolderBrandId
          in: query
          required: false
          example: 55b3299a-3e50-48a2-a190-cca263ccaba5
          schema:
            type: string
        - name: oldestCreated
          description: Constrain the consent with created time at or after this date/time. If absent defaults to newestCreated minus 90 days.  Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: '1997-01-12T15:43:00.121Z'
        - name: newestCreated
          description: Constrain the consent with created time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: '1997-01-12T15:43:00.121Z'
        - name: oldestRevoked
          description: Constrain the consent with revoked time at or after this date/time. If absent defaults to newestRevoked minus 90 days.  Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: '1997-01-12T15:43:00.121Z'
        - name: newestRevoked
          description: Constrain the consent with revoked time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
          example: '1997-01-12T15:43:00.121Z'
        - name: oldestCollectionEndDate
          description: Constrain the consent with collectionEndDate time at or after this date/time. If absent defaults to newestCollectionEndDate minus 90 days.  Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
          example: '1997-01-12T15:43:00.121Z'
        - name: newestCollectionEndDate
          description: Constrain the consent with collectionEndDate time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: '1997-01-12T15:43:00.121Z'
        - name: externalId
          description: Constrain the consent by externalId
          in: query
          required: false
          schema:
            type: string
          example: an-external-id
        - name: metadataFilter
          in: query
          example: "{\employerName\": \"adatree\"}"
          description: filter matching string for values contained in custom data
          schema:
            type: string
        - $ref: '#/components/parameters/ParamPage'
        - $ref: '#/components/parameters/QueryParamPageSize'
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentsList'
              examples:
                Example 1:
                  value:
                    consents:
                      - version: 1
                        created: '1997-01-12T15:43:00.121Z'
                        revoked: '1997-01-12T15:43:00.121Z'
                        lastNotificationSentAt: '1997-01-12T15:43:00.121Z'
                        firstDataCollection: '2012-01-12T15:43:00.121Z'
                        status: ACTIVE
                        sharingEndDate: '1997-01-12T15:43:00.121Z'
                        consumerEmail: consumer@example.com
                        dataHolderName: ANZ
                        dataHolderBrandId: f632041c-d7c8-4679-a165-aa406cd62b13
                        dataHolderLogoUri: 'https://www.abank.com.au/logo'
                        useCase:
                          id: HOME_LOAN
                          name: Home Loan Assessment
                          active: true
                          softwareProductId: software product id
                          description: Data will be used to assess your eligibility for a home loan.
                          priority: 1
                          historicalCollectionPeriodInDays: 90
                          notificationType: EMAIL
                          scopes:
                            - name: 'Bank account name, type and balance'
                              id: 'bank:accounts.basic:read'
                              purpose: This will allow us to provide best of kind service
                              claims:
                                - Name of account
                                - Type of account
                                - Account balance
                              priority: 1
                          accessFrequency: ONCE_OFF
                          sharingDurations:
                            - ONE_YEAR
                          dataHolders:
                            - dataHolderBrandId: 7ff47a14-28bd-4b04-b216-67b367713a38
                              brandName: Westpac
                              logoUri: 'https://www.westpac.com.au/logo'
                              favourite: false
                          features:
                            - string
                          industries:
                            - BANKING
                          osps:
                            - providerName: Adatree
                              serviceDescription: Adatree's Data Recipient Platform is a turnkey SaaS solution providing CDR as a Service.
                              accreditationId: ADRBNK000071
                              cdrPolicyUri: 'https://adatree.com.au/cdr-policy'
                          consumerType: INDIVIDUAL
                          customDataSchema:
                            $schema: 'https://json-schema.org/draft/2019-09/schema'
                            type: object
                            title: custom data Schema
                            description: JSON schema of customer data
                            purpose: explain why custom data is needed
                            properties:
                              employerName:
                                type: string
                                displayText: Employer name
                                uiComponent:
                                  inputType: text
                                rules:
                                  required: Employer name is required
                        postUsageAction: DELETION
                        consumerId: abedfaas-asdfsf-4asdf-1465-sfsadf3413
                        cdrArrangementId: 86a5d068-447a-4765-95c2-6f5d85d9d658
                        consentId: 7c7853a6-5466-11eb-ae93-0242ac130002
                        directMarketingAllowed: false
                        consumerMobileNumber: '00614000555666'
                        externalId: external-id-by-adatree-customer
                        grantee:
                          name: Bob the broker
                          licenceNumber: ACL001
                          id: 13245551-08e5-499c-bad5-ddd26c0ac261
                        serviceProvider:
                          name: a cool service provider
                          uri: 'https://wicked.service/policy.html'
                          description: the best service provider ever
                        metadata:
                          employerName: Adatree
                    links:
                      self: 'https://self.example.com.au?page=3&pageSize=25'
                      first: 'https://self.example.com.au?page=1&pageSize=25'
                      prev: 'https://self.example.com.au?page=2&pageSize=25'
                      next: 'https://self.example.com.au?page=4&pageSize=25'
                      last: 'https://self.example.com.au?page=15&pageSize=25'
                    meta:
                      totalPages: 4
                      totalRecords: 95
        '401':
          $ref: '#/components/responses/401Unauthorised'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '429':
          $ref: '#/components/responses/429RateLimited'
  /consents:
    get:
      security:
        - bearerAuth: [ 'consents:read' ]
        - m2m: [ 'consents:read' ]
      tags:
        - Consent
      summary: Get Consents
      description: Get all consent records for this consumer
      operationId: findAllConsents
      parameters:
        - name: consumerId
          in: query
          description: Please ensure proper encoding of this parameter as identifier values from some IDPs could have special characters like '|', which need be encoded as '%7c'. <br/>
            consumerId should only be used with machine token, otherwise it will be deemed BAD_REQUEST
          example: auth0%7c5fbc585628421a006e83d95d
          required: false
          schema:
            type: string
        - name: consumerEmail
          in: query
          example: hello@adatree.com.au
          required: false
          schema:
            type: string
        - name: consentId
          in: query
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          required: false
          schema:
            type: string
        - name: cdrArrangementId
          in: query
          example: 45db4977-b12f-42bf-808d-2680eb4bd366
          required: false
          schema:
            type: string
        - name: status
          in: query
          required: false
          example: ACTIVE
          schema:
            type: string
            enum: [REQUESTED, ACTIVE, REVOKED, EXPIRED]
        - name: accessFrequency
          in: query
          required: false
          example: ONCE_OFF
          schema:
            type: string
            enum: [ONCE_OFF, ONGOING]
        - name: postUsageAction
          in: query
          required: false
          example: DELETION
          schema:
            type: string
            enum: [DELETION, DE_IDENTIFICATION]
        - name: directMarketingAllowed
          in: query
          required: false
          example: false
          schema:
            type: boolean
        - name: useCases
          description: UseCase ids
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: dataHolderBrandId
          in: query
          required: false
          example: 55b3299a-3e50-48a2-a190-cca263ccaba5
          schema:
            type: string
        - name: oldestCreated
          description: Constrain the consent with created time at or after this date/time. If absent defaults to newestCreated
            minus 90 days.  Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: "1997-01-12T15:43:00.121Z"
        - name: newestCreated
          description: Constrain the consent with created time at or before this date/time. If absent defaults to today.
            Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: "1997-01-12T15:43:00.121Z"
        - name: oldestRevoked
          description: Constrain the consent with revoked time at or after this date/time. If absent defaults to newestRevoked
            minus 90 days.  Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: "1997-01-12T15:43:00.121Z"
        - name: newestRevoked
          description: Constrain the consent with revoked time at or before this date/time. If absent defaults to today.
            Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
          example: "1997-01-12T15:43:00.121Z"
        - name: oldestSharingEndDate
          description: Constrain the consent with sharingEndDate time at or after this date/time. If absent defaults to newestSharingEndDate
            minus 90 days.  Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
          example: "1997-01-12T15:43:00.121Z"
        - name: newestSharingEndDate
          description: Constrain the consent with sharingEndDate time at or before this date/time. If absent defaults to today.
            Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: "1997-01-12T15:43:00.121Z"
        - name: externalId
          description: Constrain the consent by externalId
          in: query
          required: false
          schema:
            type: string
          example: an-external-id
        - name: metadataFilter
          in: query
          example: "{\employerName\": \"adatree\"}"
          description: filter matching string for values contained in custom data
          schema:
            type: string
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsentResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        429:
          $ref: '#/components/responses/429RateLimited'
      deprecated: true
    post:
      security:
        - bearerAuth: [ 'consumer:consents:write', 'consents:write' ]
        - m2m: [ 'consents:write' ]
      tags:
        - Consent
      summary: Create Consent
      description: Create a consent record for consumer
      operationId: createConsent
      parameters:
        - $ref: '#/components/parameters/HeaderConsumerUserAgent'
        - $ref: '#/components/parameters/HeaderConsumerIpAddress'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsent'
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        422:
          description: active consent exists for requested use case
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        429:
          $ref: '#/components/responses/429RateLimited'
  /consents/{consentId}:
    get:
      security:
        - bearerAuth: [ 'consents:read' ]
        - m2m: [ 'consents:read' ]
      tags:
        - Consent
      summary: Get Consent
      description: Retrieve a single consent record for this consumer
      operationId: findConsent
      parameters:
        - name: consentId
          in: path
          required: true
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          schema:
            type: string
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
    patch:
      security:
        - bearerAuth: [ 'consumer:consents:write', 'consents:write' ]
        - m2m: [ 'consents:write' ]
      tags:
        - Consent
      summary: Update a consent via dashboard or back channel
      description: |
        <ul><li>Update postUsageAction, directMarketing option or sharing end date when a dashboard token is received</li><br/>
        <li>Update externalId when a machine (backchannel) token is received</li></ul>
      operationId: updateConsent
      parameters:
        - name: consentId
          in: path
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConsent'
      responses:
        200:
          description: consent successfully updated
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
    delete:
      security:
        - bearerAuth: [ 'consumer:consents:write', 'consents:write' ]
        - m2m: [ 'consents:write' ]
      tags:
        - Consent
      summary: Revoke Consent
      description: Revoke a single consent record for this consumer
      operationId: revokeConsent
      parameters:
        - name: consentId
          in: path
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          required: true
          schema:
            type: string
      responses:
        200:
          description: default response
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
  /consents/revoke:
    post:
      security:
        - m2m: [ 'adr:management:consents:write' ]
      tags:
        - Consent
      summary: Bulk Revoke Consent
      description: Revoke many consent records owned by a resource owner
      operationId: revokeConsents
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ["consentId1", "consentId2", "consentId3"]
      responses:
        200:
          description: default response
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
  /consents/{consentId}/authorization:
    get:
      security:
        - bearerAuth: [ 'consents:read' ]
        - m2m: [ 'consents:read' ]
      tags:
        - Consent
      summary: Get the authorization link for a Consent
      description: Get the authorization link for a Consent
      operationId: getAuthorizationForConsent
      parameters:
        - name: state
          description: A state is generated by the consent user-agent (browser) and is used to bind the redirection response from a Data Holder with a user session as per https://openid.net/specs/openid-financial-api-part-1-1_0-final.html#public-client. It is sent in the authentication request, and is then also included redirect from the ADH to the ADR. This allows the ADR client application prevent CSRF attacks. Must be unique per authorization request.
          in: query
          required: false
          schema:
            type: string
        - name: redirectUri
          description: The URI to redirect to from the data holder when the consumer has finished data holder authentication. Must be from the list of redirect URIs configured at the ACCC register.
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: authorization link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentAuthorization'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        409:
          $ref: '#/components/responses/409Conflict'
        429:
          $ref: '#/components/responses/429RateLimited'
      deprecated: true
    patch:
      security:
        - bearerAuth: [ 'consumer:tokens:write', 'consumer_tokens_write', 'tokens:write', 'tokens_write' ]
        - m2m: [ 'tokens:write' ]
      tags:
        - Consent
      operationId: completeDataHolderAuthorization
      summary: Process the response from the Data Holder consent process
      description: |
        At the completing of the consent process at a Data Holder, the consumer will be redirected back to the ADR system with a response JWT payload. 
        This API takes that payload and exchanges it for a Refresh Token which is the final step in activating a consent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataHolderAuthorizationResponse'
      responses:
        '201':
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentActivatedResponse'
    post:
      summary: Create an authorization link
      description: Returns an authorization request link from the Data Holder consent process.
      operationId: patchAuthorizationForConsent
      responses:
        200:
          description: authorization link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentAuthorization'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        409:
          $ref: '#/components/responses/409Conflict'
        429:
          $ref: '#/components/responses/429RateLimited'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentAuthorizationRequest'
      security:
        - bearerAuth:
            - 'consents:read'
        - m2m:
            - 'consents:read'
      tags:
        - Consent
    parameters:
      - $ref: '#/components/parameters/PathParamConsentId'
  /consents/events:
    get:
      security:
        - m2m: ['adr:consents:read']
      tags:
        - Consent
      summary: Retrieve consent events
      operationId: getConsentEvents
      parameters:
        - name: oldest
          description: Constrain the consent event result list with timestamp at or after this date/time. Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: "2022-02-06T08:17:26Z"
        - name: newest
          description: Constrain the consent event result list with timestamp at or before this date/time. Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: "2022-02-01T15:43:00.121Z"
        - $ref: '#/components/parameters/ParamConsentId'
        - $ref: '#/components/parameters/ParamPage'
        - $ref: '#/components/parameters/ParamPageSize'
      callbacks:
        ConsentUpdated:
          '{$YourWebhookUrl}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ConsentEvent'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        200:
          description: list of ConsentEvent with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentEventList'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        429:
          $ref: '#/components/responses/429RateLimited'
  /use-cases:
    get:
      security:
        - m2m: ['use-cases:read']
      tags:
        - Use Case
      summary: Get Use-cases
      description: Get all use-cases that has been configured. A use case is your reason for requesting consent from a consumer e.g. a home loan assessment, a budgeting app. The Adatree Platform will come pre-configured with your use cases.
      operationId: getUseCases
      parameters:
        - name: active
          in: query
          required: false
          example: true
          schema:
            type: boolean
      responses:
        200:
          description: successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UseCaseResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        429:
          $ref: '#/components/responses/429RateLimited'
    post:
      security:
        - m2m: ['adr:management:use-cases:write']
      tags:
        - Use Case
      summary: Create Use-case
      description: Create a use-cases. A use case is your reason for requesting consent from a consumer e.g. a home loan assessment, a budgeting app.
      operationId: createUseCase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UseCase'
      responses:
        200:
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UseCaseResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        429:
          $ref: '#/components/responses/429RateLimited'
  /use-cases/{id}:
    get:
      security:
        - m2m: ['use-cases:read']
      tags:
        - Use Case
      summary: Get Use-case
      description: Get a use-case that has been configured. A use case is your reason for requesting consent from a consumer e.g. a home loan assessment, a budgeting app.
      operationId: getUseCase
      parameters:
        - name: id
          in: path
          example: HOME_LOAN
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UseCaseResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
    put:
      security:
        - m2m: ['adr:management:use-cases:write']
      tags:
        - Use Case
      summary: Update Use-case
      description: Update a use-case that has been configured.
      operationId: updateUseCase
      parameters:
        - name: id
          in: path
          example: HOME_LOAN
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UseCase'
      responses:
        200:
          description: successful response
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
    patch:
      security:
        - m2m: ['adr:management:use-cases:write']
      tags:
        - Use Case
      summary: Configure Use-case
      description: Configure allowed data holders
      operationId: configureUseCase
      parameters:
        - name: id
          in: path
          example: HOME_LOAN
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUseCase'
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UseCaseResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
    delete:
      security:
        - m2m: ['adr:management:use-cases:write']
      tags:
        - Use Case
      summary: Delete Use-case
      description: Delete a use-case that has been configured.
      operationId: deleteUseCase
      parameters:
        - name: id
          in: path
          required: true
          example: HOME_LOAN
          schema:
            type: string
      responses:
        200:
          description: successful response
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
  /management/scopes:
    get:
      security:
        - m2m: ['adr:management:scopes:read']
      tags:
        - Use Case
      summary: Find Scopes
      description: Find all Scopes that have been configured. A Scope is an authorization request as defined by the CDR standards (https://consumerdatastandardsaustralia.github.io/standards/#authorisation-scopes). A Scope object contains a human readable version of claims to be displayed in your consumer facing application. Pre-configured platform scopes are Basic Customer Data, Basic Bank Account Data, Detailed Bank Account Data, Bank Transaction Data. These authorization scopes are for the first four APIs exposed by the CDR regime. New scopes can be added to form part of your use case via this API. No code updates are required. The Adatree platform will come preconfigured with all available CDR scopes.
      operationId: findScopes
      parameters:
        - name: name
          in: query
          example: Bank account name, type and balance
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScopeResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        429:
          $ref: '#/components/responses/429RateLimited'
  /grantees:
    post:
      security:
        - m2m: ['adr:grantees:write']
      tags:
        - Grantee
      summary: Create new grantee, which could be a trusted advisor
      operationId: createGrantees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GranteeRequest'
      responses:
        200:
          description: grantee response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GranteeResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
    get:
      security:
        - m2m: ['adr:grantees:write']
      tags:
        - Grantee
      summary: List grantees
      operationId: listGrantees
      parameters:
        - $ref: '#/components/parameters/ParamPage'
        - $ref: '#/components/parameters/ParamPageSize'
      responses:
        200:
          description: refresh response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GranteeListResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
  /grantees/{id}:
    get:
      security:
        - m2m: [ 'adr:grantees:write' ]
      tags:
        - Grantee
      summary: Retrieve a grantee
      parameters:
        - name: id
          description: UUID of a grantee
          in: path
          required: true
          schema:
            type: string
          example: 13245551-08e5-499c-bad5-ddd26c0ac261
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GranteeResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
    put:
      security:
        - m2m: [ 'adr:grantees:write' ]
      tags:
        - Grantee
      parameters:
        - name: id
          description: UUID of a grantee
          in: path
          required: true
          schema:
            type: string
          example: 13245551-08e5-499c-bad5-ddd26c0ac261
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GranteeRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
    delete:
      security:
        - m2m: ['adr:grantees:write']
      tags:
        - Grantee
      parameters:
        - name: id
          description: UUID of a grantee
          in: path
          required: true
          schema:
            type: string
          example: 13245551-08e5-499c-bad5-ddd26c0ac261
      responses:
        204:
          description: successful response
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
  /management/usage:
    get:
      security:
        - m2m: ['adr:management:usage:read']
      tags:
        - Usage
      parameters:
        - name: type
          description: type of usage
          in: query
          required: true
          schema:
            type: string
            enum: [CONSENT, INSIGHTS]
          example: CONSENT
        - name: dimension
          description: determines the time increment to aggregate over
          in: query
          required: true
          schema:
            type: string
            enum: [HOURLY, DAILY, MONTHLY, YEARLY]
          example: HOURLY
        - name: group
          description: determines the attribute to group by
          in: query
          schema:
            type: string
            enum: [NONE, ACTIVE_CONSUMER, CONSUMER, DATA_HOLDER, USE_CASE, CONSENT_STAGE]
          example: CONSUMER
        - name: relative
          description: relative time period to aggregate over. Superseded if both oldest and newest values provided
          in: query
          required: true
          schema:
            type: string
            enum: [TODAY, YESTERDAY, THIS_WEEK, LAST_WEEK, THIS_MONTH, LAST_MONTH, THIS_YEAR, LAST_YEAR]
          example: YESTERDAY
        - name: oldest
          description: Constrain the result with timestamp at or after this date/time. Format is aligned to DateTimeString common type
          in: query
          schema:
            type: string
            format: date-time
            example: "2022-02-06T08:17:26Z"
        - name: newest
          description: Constrain the result with timestamp at or before this date/time. Format is aligned to DateTimeString common type
          in: query
          schema:
            type: string
            format: date-time
            example: "2022-02-01T15:43:00.121Z"
      responses:
        204:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
  /passwordless-login:
    post:
      security:
        - m2m: [ 'passwordless-login:write' ]
      tags:
        - Identity
      summary: Create a passwordless login link
      description: >
        A passwordless login link which will be sent to a consumer and can be used to sign in to the consent dashboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordlessLoginLinkRequest'
      responses:
        201:
          $ref: '#/components/schemas/PasswordlessLoginLinkResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
  /passwordless-login/schemas/{schemaId}:
    put:
      security:
        - m2m: [ 'passwordless-login:write' ]
      tags:
        - Identity
      summary: Create or update the passwordless login session schema definition
      description: >
        A passwordless login link can have additional session metadata added to it. This schema defines that metadata e.g. firstName.
      parameters:
        - name: schemaId
          in: path
          example: HELLO_WORLD_SCHEMA
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionDataSchema'
      responses:
        204:
          description: No Content
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
    delete:
      security:
        - m2m: [ 'passwordless-login:write' ]
      tags:
        - Identity
      summary: Delete the passwordless login session schema definition
      description: >
        Delete a passwordless login link session metadata schema definition.
      parameters:
        - name: schemaId
          in: path
          example: HELLO_WORLD_SCHEMA
          required: true
          schema:
            type: string
      responses:
        204:
          description: No Content
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
  /passwordless-login/schemas:
    get:
      security:
        - m2m: [ 'passwordless-login:write' ]
      tags:
        - Identity
      summary: Get the passwordless login session schema definition
      description: >
        A passwordless login link can have additional session metadata added to it. This schema defines that metadata e.g. firstName.
      parameters:
        - $ref: '#/components/parameters/ParamPage'
        - $ref: '#/components/parameters/ParamPageSize'
      responses:
        200:
          description: Session data schema list response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDataSchemaListResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
  /passwordless-sign-in:
    post:
      tags:
        - Identity
      summary: Create a session from a passwordless login link
      description: >
        After a passwordless login link is sent to a consumer, the link is clicked and a new session is generated
      responses:
        200:
          $ref: '#/components/schemas/PasswordlessLoginLinkSignInResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    m2m:
      type: oauth2
      description: Machine to machine OAuth2 for scope management
      flows:
        clientCredentials:
          tokenUrl: https://adatree-adr.au.auth0.com/oauth/token
          scopes:
            'consents:read': allow ADR to manage consents
            'consents:write': allow ADR to fetch Consent info
            'use-cases:read': allow ADR to fetch UseCase info
            'scopes:read': allow ADR to fetch Scope info
            'passwordless-login:write': allow ADR to create a passwordless login link

  schemas:
    ConsentsList:
      type: object
      required:
        - consents
        - links
        - meta
      properties:
        consents:
          type: array
          items:
            $ref: '#/components/schemas/ConsentResponse'
        links:
          $ref: '#/components/schemas/LinksPaginated'
        meta:
          $ref: '#/components/schemas/MetaPaginated'
    CreateConsent:
      type: object
      required: [sharingEndDate, dataHolderBrandId, useCaseId]
      properties:
        consumerEmail:
          type: string
          example: "consumer@example.com"
          description: this is required if chosen Use Case uses email as notification channel
        sharingEndDate:
          type: string
          description: sharing end date, will be validated against sharing duration options defined in chosen Use Case
          format: date-time
          example: "2023-04-19T15:43:00.121Z"
        dataHolderBrandId:
          type: string
          example: 55b3299a-3e50-48a2-a190-cca263ccaba5
        useCaseId:
          type: string
          example: HOME_LOAN
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        directMarketingAllowed:
          type: boolean
          example: false
        consumerMobileNumber:
          type: string
          description: this is required if chosen Use Case uses mobile number as notification channel
          example: "00614000555666"
        externalId:
          type: string
          description: Adatree's customer can supply an externalId when creating consents to associate with records in its own system
          example: external-id-by-adatree-customer
        consumerId:
          type: string
          description: |
            consumerId, please be kindly reminded of proper encoding as Id from some IDP could have special character like '|', which need be encoded as '%7c'. <br/>
            consumerId is required (and only accepted) for back-channel consent creation
          example: auth0%7c5fbc585628421a006e83d95d
        grantee:
          $ref: '#/components/schemas/Grantee'
        metadata:
          type: object
          example: { "employerName": "Adatree" }
        customData:
          type: object
          description: deprecated. use metadata
          example: { "employerName": "Adatree" }
    ConsentAuthorization:
      type: object
      description: Authorization link for a Consent
      required:
        - success
      properties:
        success:
          type: boolean
          description: indicates the outcome of the authorization request
          example: true
        error:
          type: string
          description: an indication of the reason for the authorization failure
          example: true
        expiry:
          type: string
          format: date-time
          description: DateTime of expiry of the authorization URI.
          example: "2024-01-12T15:43:00.121Z"
        uri:
          type: string
          description: uri to redirect the consumer to
          example: https://id.rab.sandbox.adatree.com.au/identity/authorization?response_type=code+id_token&client_id=abcdefg&request_uri=urn%3Aietf%3Aparams%3Aoauth%3Arequest_uri%3A-asdfasdfuhlkjshdf_akjsldflasjd&scope=openid+bank%3Aaccounts.basic%3Aread+bank%3Aaccounts.detail%3Aread+bank%3Atransactions%3Aread+common%3Acustomer.basic%3Aread
    ConsentAuthorizationRequest:
      title: ConsentAuthorizationRequest
      type: object
      properties:
        state:
          type: string
          description: 'A state is generated by the consent user-agent (browser) and is used to bind the redirection response from a Data Holder with a user session as per https://openid.net/specs/openid-financial-api-part-1-1_0-final.html#public-client. It is sent in the authentication request, and is then also included redirect from the ADH to the ADR. This allows the ADR client application prevent CSRF attacks. Must be unique per authorization request.'
        redirectUri:
          type: string
          description: The URI to redirect to from the data holder when the consumer has finished data holder authentication. Must be from the list of redirect URIs configured at the ACCC register.
        sharingEndDate:
          type: string
          description: 'Date/time of the consent expiry. For new consents, it''s a consent expiry. For existing consents, it''s the target consent extension date/time.'
          format: date-time
      required:
        - consentId
        - state
        - redirectUri
        - sharingEndDate
    Grantee:
      type: object
      description: consent grantee that will access CDR data
      required: [ name, licenceNumber ]
      properties:
        name:
          type: string
          description: grantee name
          example: Bob the broker
        licenceNumber:
          type: string
          example: ACL001
          description: ACL number of consent grantee
        id:
          type: string
          example: f6332cde-655b-4295-9665-7146a74be0f2
          description: A grantee's UUID. When grantee id is supplied, name and licenceNumber must NOT be supplied. Applicable using a Machine token or a Consumer token
    ConsentEventData:
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/ConsentEvent'
    ConsentEvent:
      type: object
      required: [eventType, timestamp, cdrArrangementId, consumerId, consentId, postUsageAction]
      properties:
        eventId:
          type: string
          description: a UUID of the event that could be used for idempotent event processing
          example: 32dd2e21-e7c8-44b1-b379-39e2ccd7a097
        eventType:
          type: string
          description: |
            This identifies the different types of events through a consent's lifecycle. <br/>
            A consent becomes GRANTED after consumer consent with Data Holder<br/>
            it can be revoked by a consumer via ADR or Data Holder<br/>
            an ongoing consent will expire on (if it is not revoked prior to) sharing end date
            a once_off consent will expire within 24 hours after the consent is GRANTED
          enum: [GRANTED, REVOKED, EXPIRED, DATA_COLLECTION_COMPLETED]
        timestamp:
          type: string
          format: date-time
          example: "2022-01-20T15:00:00.999Z"
        cdrArrangementId:
          type: string
          example: 854d862c-5466-11eb-ae93-0242ac130002
        consentId:
          type: string
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
        consumerId:
          type: string
          example: abedfaas-asdfsf-4asdf-1465-sfsadf3413
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        externalId:
          type: string
          example: external-id-by-adatree-customer
        sharingEndDate:
          type: string
          format: date-time
          example: "2023-04-19T15:43:00.121Z"
        consumerEmail:
          type: string
          example: "consumer@example.com"
        consumerMobileNumber:
          type: string
          example: "00614000555666"
        grantee:
          $ref: '#/components/schemas/GranteeResponse'
        customData:
          type: object
          example: { "employerName": "Adatree" }
    ConsentEventList:
      type: object
      required:
        - data
        - links
        - meta
      properties:
        data:
          $ref: '#/components/schemas/ConsentEventData'
        links:
          $ref: '#/components/schemas/LinksPaginated'
        meta:
          $ref: '#/components/schemas/MetaPaginated'
    LinksPaginated:
      type: object
      required:
        - self
      properties:
        self:
          type: string
          description: Fully qualified link that generated the current response document.
            https://self.example.com.au will be converted to https://self.example.com.au?page=1&page-size=25
          example: https://self.example.com.au?page=3&page-size=25
        first:
          type: string
          description: URI to the first page of this set. Mandatory if this response is not the first page
          example: https://self.example.com.au?page=1&page-size=25
        prev:
          type: string
          description: URI to the previous page of this set. Mandatory if this response is not the first page
          example: https://self.example.com.au?page=2&page-size=25
        next:
          type: string
          description: URI to the next page of this set. Mandatory if this response is not the last page
          example: https://self.example.com.au?page=4&page-size=25
        last:
          type: string
          description: URI to the last page of this set. Mandatory if this response is not the last page
          example: https://self.example.com.au?page=15&page-size=25
      x-conditional:
        - prev
        - next
        - first
        - last
    MetaPaginated:
      type: object
      required:
        - totalPages
        - totalRecords
      properties:
        totalPages:
          type: integer
          description: The total number of pages in the full set.
          example: 4
        totalRecords:
          type: integer
          description: The total number of records in the full set.
          example: 95
    ScopePurpose:
      type: object
      required:
        - purpose
      properties:
        scopeId:
          $ref: '#/components/schemas/Scope'
        purpose:
          type: string
          example: "Describe how this scope is used"
    Scope:
      type: string
      example: bank:accounts.basic:read
      enum:
        - bank:accounts.basic:read
        - bank:accounts.detail:read
        - bank:transactions:read
        - bank:payees:read
        - bank:regular_payments:read
        - energy:accounts.basic:read
        - energy:accounts.detail:read
        - energy:accounts.concessions:read
        - energy:accounts.paymentschedule:read
        - energy:billing:read
        - energy:electricity.servicepoints.basic:read
        - energy:electricity.servicepoints.detail:read
        - energy:electricity.der:read
        - energy:electricity.usage:read
        - common:customer.basic:read
        - common:customer.detail:read
        - profile
        - email phone address
    UseCase:
      type: object
      required:
        - id
        - name
        - scopes
        - accessFrequency
        - historicalCollectionPeriodInDays
        - softwareProductId
        - industries
        - consumerType
      properties:
        id:
          type: string
          example: HOMELOAN
        name:
          type: string
          example: Home Loan
        softwareProductId:
          type: string
          example: software product id
        description:
          type: string
          example: Data will be used to assess your eligibility for a home loan.
        active:
          type: boolean
          example: true
        priority:
          type: integer
          format: int32
          example: 1
        historicalCollectionPeriodInDays:
          type: integer
          format: int32
          example: 90
          minimum: 1
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        scopes:
          type: array
          description: scopeIds with corresponding purposes for display
          items:
            $ref: '#/components/schemas/ScopePurpose'
        accessFrequency:
          $ref: '#/components/schemas/AccessFrequency'
        sharingDurations:
          type: array
          description: default to ["CUSTOM"] for Ongoing consent; default to ["ONCE_OFF"] for Once_off consent if not supplied
          items:
            $ref: '#/components/schemas/SharingDuration'
        features:
          type: array
          description: list of features enabled for use-case
          items:
            type: string
        industries:
          type: array
          description: list of industries this use-case applies to.
          items:
            $ref: '#/components/schemas/Industry'
        consumerType:
          $ref: '#/components/schemas/ConsumerType'
        osps:
          type: array
          description: list of OSPs used to provide this use case.
          items:
            $ref: '#/components/schemas/OutsourcedServiceProvider'
        customDataSchema:
          $ref: '#/components/schemas/CustomDataSchema'
    UpdateUseCase:
      description: amendable parts of the use case definition
      type: object
      properties:
        dataHolderIds:
          type: array
          example: [ "327e98b5-87cd-4a66-80b7-573aa2faa0ea", "33101bbb-a540-4dee-b6ab-571d7624b0dc" ]
          description: a list of data holder ids
          items:
            type: string
        favouriteDataHolderIds:
          type: array
          example: [ "327e98b5-87cd-4a66-80b7-573aa2faa0ea", "33101bbb-a540-4dee-b6ab-571d7624b0dc" ]
          description: a list of favourite data holder ids
          items:
            type: string
        features:
          type: array
          description: list of features enabled for use-case
          items:
            type: string
        industries:
          type: array
          description: list of industries this use-case applies to.
          items:
            $ref: '#/components/schemas/Industry'
        consumerType:
          $ref: '#/components/schemas/ConsumerType'
        active:
          type: boolean
          example: true
        osps:
          type: array
          description: list of OSPs used to provide this use case.
          items:
            $ref: '#/components/schemas/OutsourcedServiceProvider'
        customDataSchema:
          $ref: '#/components/schemas/CustomDataSchema'
    UseCaseResponse:
      type: object
      required:
        - id
        - name
        - active
        - softwareProductId
        - description
        - priority
        - historicalCollectionPeriodInDays
        - notificationType
        - scopes
        - accessFrequency
        - sharingDurations
        - dataHolders
        - industries
        - consumerType
      properties:
        id:
          type: string
          example: HOME_LOAN
        name:
          type: string
          example: Home Loan Assessment
        active:
          type: boolean
          example: true
        softwareProductId:
          type: string
          example: software product id
        description:
          type: string
          example: Data will be used to assess your eligibility for a home loan.
        priority:
          type: integer
          format: int32
          example: 1
        historicalCollectionPeriodInDays:
          type: integer
          format: int32
          example: 90
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeResponse'
        accessFrequency:
          $ref: '#/components/schemas/AccessFrequency'
        sharingDurations:
          type: array
          description: default to ["CUSTOM"] for Ongoing consent; default to ["ONCE_OFF"] for Once_off consent if not supplied
          items:
            $ref: '#/components/schemas/SharingDuration'
        dataHolders:
          description: list of data holders, can be configured via management API
          type: array
          items:
            $ref: '#/components/schemas/DataHolder'
        features:
          type: array
          description: list of features enabled for use-case
          items:
            type: string
        industries:
          type: array
          description: list of industries this use-case applies to.
          items:
            $ref: '#/components/schemas/Industry'
        osps:
          type: array
          description: list of OSPs used to provide this use case.
          items:
            $ref: '#/components/schemas/OutsourcedServiceProvider'
        consumerType:
          $ref: '#/components/schemas/ConsumerType'
        customDataSchema:
          $ref: '#/components/schemas/CustomDataSchema'
    CustomDataSchema:
      type: string
      description: Stringified JSON Schema for customData
      example:
        {
          "$schema": "https://json-schema.org/draft/2019-09/schema",
          "type": "object",
          "title": "custom data Schema",
          "description": "JSON schema of customer data",
          "purpose": "explain why custom data is needed",
          "properties": {
            "employerName": {
              "type": "string",
              "displayText": "Employer name",
              "uiComponent": {
                "inputType": "text"
              },
              "rules": {
                "required": "Employer name is required"
              }
            }
          }
        }
    SessionDataSchema:
      type: object
      description: Stringified JSON Schema for sessionData
      properties:
        schemaId:
          type: string
          description: The identifier of the session data schema
          example: HELLO_WORLD_SCHEMA
        name:
          type: string
          description: The name of the session data schema
          example: Hello World Schema
        description:
          type: string
          description: The description of the session data schema
          example: This schema defines how the hello world function works
        jsonSchema:
          type: string
          description: A stringified JSON Schema
          example:
            {
              "$schema": "https://json-schema.org/draft/2019-09/schema",
              "type": "object",
              "title": "session data Schema",
              "description": "JSON schema of session data",
              "properties": {
                "firstName": {
                  "type": "string",
                  "displayText": "First Name",
                  "uiComponent": {
                    "inputType": "text"
                  },
                  "rules": {
                    "required": "First name is required"
                  }
                }
              }
            }
        isDefault:
          type: boolean
          description: If true then this schema is to be used in a scenario where a customer does not want to deal with the complexity of managing or choosing from multiple schemas.
          example: false
    DataHolder:
      required:
        - dataHolderBrandId
        - brandName
        - logoUri
      type: object
      properties:
        dataHolderBrandId:
          type: string
          description: The identifier of the data holder you wish the consumer to authenticate with.
          example: 7ff47a14-28bd-4b04-b216-67b367713a38
        brandName:
          type: string
          description: The brand name of the data holder you wish the consumer to authenticate with.
          example: Westpac
        logoUri:
          type: string
          description: The logo URI of the data holder you wish the consumer to authenticate with.
          example: https://www.westpac.com.au/logo
        favourite:
          type: boolean
          example: false
    OutsourcedServiceProvider:
      required:
        - providerName
        - serviceDescription
      type: object
      properties:
        providerName:
          type: string
          description: The consumer facing name of the service provider.
          example: Adatree
        serviceDescription:
          type: string
          description: The consumer facing description of what the service provider does as part of supporting the use case.
          example: Adatree's Data Recipient Platform is a turnkey SaaS solution providing CDR as a Service.
        accreditationId:
          type: string
          description: The ACCC issued Accreditation ID if applicable. Normally only applied to OSPs for data collection e.g. Adatree.
          example: ADRBNK000071
        cdrPolicyUri:
          type: string
          description: The logo URI of the data holder you wish the consumer to authenticate with.
          example: https://adatree.com.au/cdr-policy
    ResponseErrorList:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ResponseErrorListErrors'
    ResponseErrorListErrors:
      required:
        - code
        - detail
        - title
      properties:
        code:
          type: string
          description: 'Error code'
          example: "0001"
        title:
          type: string
          description: 'Title of invalid parameter or payload property'
          example: "property x"
        detail:
          type: string
          description: 'detailed error message'
          example: "x is required"
        meta:
          type: object
          description: Optional additional data for specific error types
          properties: {}
    ScopeResponse:
      type: object
      properties:
        name:
          type: string
          example: Bank account name, type and balance
        id:
          type: string
          example: bank:accounts.basic:read
        purpose:
          type: string
          example: "This will allow us to provide best of kind service"
        claims:
          type: array
          example: [ "Name of account", "Type of account", "Account balance"]
          items:
            type: string
        priority:
          type: integer
          example: 1
          format: int32
    GranteeRequest:
      type: object
      description: consent grantee that will access CDR data
      required: [name, licenceNumber]
      properties:
        name:
          type: string
          description: grantee name
          example: Bob the broker
        licenceNumber:
          type: string
          example: ACL001
          description: ACL number of consent grantee
    GranteeResponse:
      type: object
      description: grantee name, licenceNumber and its UUID
      required: [ name, licenceNumber, token ]
      properties:
        name:
          type: string
          description: grantee name
          example: Bob the broker
        licenceNumber:
          type: string
          example: ACL001
          description: ACL number of consent grantee
        id:
          type: string
          example: 13245551-08e5-499c-bad5-ddd26c0ac261
          description: grantee id
    GranteeListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GranteeResponse'
        links:
          $ref: '#/components/schemas/LinksPaginated'
        meta:
          $ref: '#/components/schemas/MetaPaginated'
    ConsentResponse:
      type: object
      required:
        - consentId
      properties:
        version:
          type: integer
          format: int32
          example: 1.0
        created:
          type: string
          format: date-time
          example: "1997-01-12T15:43:00.121Z"
        revoked:
          type: string
          format: date-time
          example: "1997-01-12T15:43:00.121Z"
        lastNotificationSentAt:
          type: string
          format: date-time
          example: "1997-01-12T15:43:00.121Z"
        firstDataCollection:
          type: string
          format: date-time
          example: "2012-01-12T15:43:00.121Z"
        status:
          $ref: '#/components/schemas/Status'
        sharingEndDate:
          type: string
          format: date-time
          example: "1997-01-12T15:43:00.121Z"
        consumerEmail:
          type: string
          example: "consumer@example.com"
        dataHolderName:
          type: string
          example: ANZ
        dataHolderBrandId:
          type: string
          example: f632041c-d7c8-4679-a165-aa406cd62b13
        dataHolderLogoUri:
          type: string
          example: https://www.abank.com.au/logo
        useCase:
          $ref: '#/components/schemas/UseCaseResponse'
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        consumerId:
          type: string
          example: abedfaas-asdfsf-4asdf-1465-sfsadf3413
        cdrArrangementId:
          type: string
          example: 86a5d068-447a-4765-95c2-6f5d85d9d658
        consentId:
          type: string
          example: 7c7853a6-5466-11eb-ae93-0242ac130002
        directMarketingAllowed:
          type: boolean
          example: false
        consumerMobileNumber:
          type: string
          example: "00614000555666"
        externalId:
          type: string
          description: Adatree's customer can supply an externalId when creating consents to associate with records in its own system
          example: external-id-by-adatree-customer
        grantee:
          $ref: '#/components/schemas/ConsentGrantee'
        serviceProvider:
          $ref: '#/components/schemas/ServiceProvider'
        metadata:
          type: string
          description: metadata of the consent
          example: { "employerName": "Adatree" }
    UpdateConsent:
      type: object
      description: Updates a consent. A consumer can update PostUsageAction,directMarketingAllowed and sharingEndDate and a machine user can update external ID. Errors will be thrown if these rules are not followed
      properties:
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        directMarketingAllowed:
          type: boolean
          example: true
        sharingEndDate:
          type: string
          description: new sharing end date, will be rounded to the end of specified date and validated against sharing duration options defined in chosen Use Case
          format: date-time
          example: "2023-04-19T15:43:00.121Z"
        externalId:
          type: string
          example: external-id-by-adatree-customer
    ConsentGrantee:
      type: object
      description: consent grantee that will access CDR data
      required: [name, licenceNumber]
      properties:
        name:
          type: string
          description: grantee name
          example: Bob the broker
        licenceNumber:
          type: string
          example: ACL001
          description: ACL number of consent grantee
        id:
          type: string
          example: 13245551-08e5-499c-bad5-ddd26c0ac261
          description: grantee id
    ServiceProvider:
      type: object
      description: Grantee's service provider
      properties:
        name:
          type: string
          description: trusted adviser service provider name
          example: a cool service provider
        uri:
          type: string
          description: service provider's website or contact info (email, phone number & etc)
          example: https://wicked.service/policy.html
        description:
          type: string
          description: description of the service provider
          example: the best service provider ever
    UsageResponse:
      type: object
      description: Usage response
      required:
        - summary
        - details
      properties:
        summary:
          $ref: '#/components/schemas/UsageSummary'
        details:
          type: array
          description: array of values representing the aggregation result
          items:
            $ref: '#/components/schemas/UsageDetail'
    UsageDetail:
      type: object
      description: Usage detail response
      required:
        - date
        - count
      properties:
        date:
          type: string
          format: date-time
          description: date of the bucket zeroed out to the start of the period
          example: "2022-02-06T08:00:00Z"
        count:
          type: integer
          description: number of results for the period
          example: 11
        attribute:
          type: string
          description: particular attribute value grouped by.
          example: "dh-123"
    UsageSummary:
      type: object
      required:
        - type
        - dimension
        - start
        - end
        - total
      description: Usage summary response
      properties:
        type:
          type: string
          description: The usage type of the response
          example: INSIGHTS
        dimension:
          type: string
          description: The dimension requested
          example: INSIGHTS
        start:
          type: string
          format: date-time
          description: the earliest date for the whole period
          example: "2022-01-06T08:00:00Z"
        end:
          type: string
          format: date-time
          description: the latest date for the whole period
          example: "2022-02-06T08:00:00Z"
        total:
          type: integer
          description: the total number of results for the whole period
          example: 1100

    # enum
    AccessFrequency:
      type: string
      example: ONCE_OFF
      enum:
        - ONCE_OFF
        - ONGOING
    ConsumerType:
      type: string
      description: |
        consumer types that will be consenting to the various scopes (data clusters)
      example: INDIVIDUAL
      enum:
        - ALL
        - INDIVIDUAL
        - ORGANISATION
        - ANY
    NotificationType:
      type: string
      example: EMAIL
      enum:
        - EMAIL
        - SMS
    PostUsageAction:
      type: string
      example: DELETION
      enum:
        - DELETION
        - DE_IDENTIFICATION
    SharingDuration:
      type: string
      description: |
        sharingDuration for Once_off consent can only be "ONCE_OFF" <br/>
        sharingDuration for Ongoing consent could be one of predefined sharing durations or "CUSTOM" <br/>
        "CUSTOM" (Ongoing consent) means a consumer is free to choose a sharingEndDate
      example: ONE_YEAR
      enum:
        - ONE_DAY
        - ONE_WEEK
        - TWO_WEEKS
        - ONE_MONTH
        - THREE_MONTHS
        - SIX_MONTHS
        - NINE_MONTHS
        - ONE_YEAR
        - SEVEN_YEARS
        - CUSTOM
        - ONCE_OFF
    Industry:
      type: string
      example: BANKING
      default: BANKING
      enum:
        - BANKING
        - ENERGY
    Status:
      type: string
      example: ACTIVE
      enum:
        - REQUESTED
        - ACTIVE
        - EXPIRED
        - REVOKED
    PasswordlessLoginLinkRequest:
      type: object
      properties:
        email:
          type: string
        notifyConsumer: # TBC if this will be MVP
          type: boolean
        additionalClaims:
          type: object
          additionalProperties: true  # means that the object can have any number of additional properties.
          description: additional claims that will be added to the id_token after a user successfully creates a session using a passwordless login link
        schemaId:
          type: string
          description: the session data schema ID to validate the additionalClaims field against. Optional for machine authorization tokens. Must be present for other authorization token types. If not present then the additionalClaims stored will not be validated.
    PasswordlessLoginLinkResponse:
      type: object
      properties:
        link:
          type: string
        sub:
          type: string
        email:
          type: string
        seconds_remaining:
          type: number
    PasswordlessLoginLinkSignInResponse:
      type: object
      properties:
        access_token:
          type: string
        id_token:
          type: string
        scope:
          type: string
        expires_in:
          type: number
        token_type:
          type: string
          enum:
            - Bearer
    SessionDataSchemaListResponse:
      type: object
      properties:
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/SessionDataSchema'
        meta:
          $ref: '#/components/schemas/MetaPaginated'
    DataHolderAuthorizationResponse:
      type: object
      properties:
        response:
          type: string
          description: response payload from the Dataholder after a successful consent
          example: eyJraWQiOiIxZTlnZGs3IiwiYWxnIjoiUl...
    ConsentActivatedResponse:
      type: object
      properties:
        activeConsentId:
          type: string
          description: Identifier of the consent which has now been activated by the completion of the Authorization flow.
        state:
          type: string
          description: The original OAuth 2.0 state parameter that is provided as part of the authorization process

    # this is here temporarily while we deprecate this endpoint properly
    OldInfosecAuthorization:
      type: object
      properties:
        code:
          type: string
          description: Authorization code returned from the data holder that will be used as part of token request validation.
          example: lFDNAS-JVITGzvba3yXfrPR8hWZlCKy6nutbzrmXKop56"
        state:
          type: string
          description: The state is a parameter returned by the data holder that is used to prevent CSRF attacks. Must be unique per authorization request.
          example: f99953a5-49a5-497c-91b6-4bd14cdace74
        id_token:
          type: string
          description: ID Token value associated with the authenticated session that is returned from the data holder.
          example: eyJraWQiOiIxZTlnZGs3IiwiYWxnIjoiUl...
        response:
          type: string
          description: response payload from the Dataholder after a successful consent
          example: eyJraWQiOiIxZTlnZGs3IiwiYWxnIjoiUl...
    TokenCreatedResponse:
      type: object
      properties:
        activeConsentId:
          type: string
          description: Identifier of the consent which has now been activated by the completion of the Authorization flow.
        state:
          type: string
          description: The original OAuth 2.0 state parameter that is provided as part of the authorization process

  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    401Unauthorised:
      description: Unauthorised
    403Forbidden:
      description: Forbidden
    404NotFound:
      description: The specified resource was not found.
    400BadRequest:
      description: Request is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseErrorList'
    429RateLimited:
      description: Ratelimit reached
    GenericError:
      description: An error occurred.
      content:
        application/json:
          schema:
            type: string
            example: something went wrong
    409Conflict:
      description: Request cannot be processed because of consent status
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseErrorList'
  #-------------------------------
  # Reusable parameters
  #-------------------------------
  parameters:
    HeaderConsumerUserAgent:
      name: Adatree-Consumer-User-Agent
      in: header
      description: Mandatory for calls using a Machine token. The consumer's original User Agent header
      schema:
        type: string
        example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36
    HeaderConsumerIpAddress:
      name: Adatree-Consumer-Ip-Address
      in: header
      description: Mandatory for calls using a Machine token. The consumer's original IP address.
      schema:
        type: string
        example: 127.0.0.1
    ParamPage:
      name: page
      in: query
      description: Page of results to request (standard pagination)
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
        example: 1
    ParamPageSize:
      name: page-size
      in: query
      description: Page size to request. Default is 25 (standard pagination)
      schema:
        type: integer
        default: 25
        minimum: 1
        example: 25
    ParamConsentId:
      name: consentId
      in: query
      description: consent id
      required: false
      schema:
        type: string
        example: 148c9187-e52b-431f-9b24-7225e75ca2be
    PathParamConsentId:
      name: consentId
      in: path
      description: consent id
      required: true
      schema:
        type: string
        example: 148c9187-e52b-431f-9b24-7225e75ca2be
    ParamCdrArrangementId:
      name: cdrArrangementId
      in: query
      description: cdr arrangement id
      required: false
      schema:
        type: string
        example: 45db4977-b12f-42bf-808d-2680eb4bd366
    QueryParamPageSize:
      name: pageSize
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1000
        example: 1000
      description: Page size to request. Default is 1000